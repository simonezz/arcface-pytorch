torch_seed: 17
project_name: "arcface-pytorch"  # wandb project name
run_name: "arcface-pytorch-tuning-2"  # wandb run name

env: "default"
backbone: "resnet18"
classify: "softmax"
num_classes: 43
metric: "arc_margin"
easy_margin: False
use_se: False
loss: "focal_loss"

display: False
finetune: False

train_root: "../arcface-tf2/data/graph_data_augmented"

test_root: "/data1/Datasets/anti-spoofing/test/data_align_256"
test_list: "test.txt"

checkpoints_path: "checkpoints"
load_model_path: "models/resnet18.pth"
test_model_path: "checkpoints/resnet18_110.pth"
save_interval: !!int 10

train_batch_size: !!int 20  # batch size
test_batch_size: !!int 8

input_shape: (1, 256, 256)

optimizer: "sgd"

use_gpu: True  # use GPU or not
gpu_id: "0, 1"
num_workers: !!int 8  # how many workers for loading data
print_freq: !!int 100  # print info every N batch

debug_file: "/tmp/debug"  # if os.path.exists(debug_file): enter ipdb
result_file: "result.csv"

max_epoch: !!int 50
lr: !!float 1e-1  # initial learning rate
lr_step: !!int 10
lr_decay: !!float 0.8  # when val_loss increase, lr: lr*lr_decay
weight_decay: !!float 5e-2

size : None # ori, s(small), xs, None(if pretrained)
pretrained: True # Use pretrained model?